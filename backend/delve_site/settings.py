import django_heroku
import dj_database_url


"""
Django settings for delve_site project.

Generated by 'django-admin startproject' using Django 2.2.2.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os
import subprocess
import pdfkit
import platform
from django.contrib.messages import constants as message_constants
MESSAGE_LEVEL = message_constants.DEBUG

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
TEMPLATE_DIR = os.path.join(BASE_DIR, 'templates')
MODEL_CMD = os.path.join(BASE_DIR, 'data/efficacy.h5')


# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True


# MUST ADD TO requirements.txt

### DJANGO CHANNELS STUFF redis end ####

# ASGI_APPLICATION should be set to your outermost router
ASGI_APPLICATION = 'delve_site.routing.application' 
# CHANNEL_LAYERS = {
#     'default': {
#         'BACKEND': 'channels_redis.core.RedisChannelLayer',
#         'CONFIG': {
#             "hosts": [('127.0.0.1', 6379)],
#         },
#     },
# }


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 't!m_*yg&r@*b3!+2!d3ko)y^4gu7n4*8!*to4=a&stsfb8g$=#'


ALLOWED_HOSTS = ['.herokuapp.com']


# Application definition

INSTALLED_APPS = [
    #Auto complete
    'dal',
    'dal_select2',
    # 'grappelli',
    'rest_framework',

    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.sites',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'haystack',
    'django_extensions',
    # PDF
    'wkhtmltopdf',
    'django_tables2',

    # Django apps for Delve
    'delve',
    'combos',
    'ada',
    
    # Websocket channels
    # 'channels',

    # Yubikey
    'otp_yubikey',

    # Two Factor Authentication
    # 'django_otp',
    # 'django_otp.plugins.otp_totp',
    # 'django_otp.plugins.otp_static',
    # 'two_factor',
    
    # AWS S3 Bucket
    'storages',

    # Twilio
    # 'twofa',
    # 'phone_verification',
    # 'clients'
    'django_twilio',


]

SITE_ID = 1 

MIDDLEWARE = [
    # 'djdev_panel.middleware.DebugMiddleware',  # <--- This is for debugging

    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',    
    
    # Twilio
    'django.middleware.clickjacking.XFrameOptionsMiddleware',


    # 2FA
    # 'django_otp.middleware.OTPMiddleware',
    
    # Include for twilio gateway
    # 'two_factor.middleware.threadlocals .ThreadLocals',

    # 'django.middleware.clickjacking.XFrameOptionsMiddleware',

    # Added:
    # 'django.contrib.auth.middleware.AuthenticationMiddleware',
    # 'django_otp.middleware.OTPMiddleware',

    # Deployment
    'whitenoise.middleware.WhiteNoiseMiddleware',

]

ROOT_URLCONF = 'delve_site.urls'


TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [TEMPLATE_DIR],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'delve_site.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases


    


# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Added for two factor authentication:

LOGIN_URL = '/login/'
LOGOUT_URL = '/logout/'
LOGIN_REDIRECT_URL = '/protected/'
LOGOUT_REDIRECT_URL = '/login/'

# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATICFILES_DIRS = [ 
    os.path.join(BASE_DIR, "static"),
 ]

STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATIC_TMP = os.path.join(BASE_DIR, 'static')
STATIC_URL = '/static/'
# STATICFILES_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'

os.makedirs(STATIC_TMP, exist_ok=True)
os.makedirs(STATIC_ROOT, exist_ok=True)

MEDIA_ROOT = os.path.join(BASE_DIR,'media')
MEDIA_URL = '/media/'
# LOGIN_URL = '/delve/user_login/'

# LOGIN_URL = 'two_factor:login'
# # this one is optional
# LOGIN_REDIRECT_URL = 'two_factor:profile'

django_heroku.settings(locals())

# For session users
# SESSION_ENGINE = 'django.contrib.sessions.backends.signed_cookies'
# TEMPLATE_CONTEXT_PROCESSORS = django.core.context_processors.request


# HAYSTACK_CONNECTIONS = {
#     'default': {
#         'ENGINE': 'haystack.backends.solr_backend.SolrEngine',
#         'URL': 'http://127.0.0.1:8983/solr'
#         # ...or for multicore...
#         # 'URL': 'http://127.0.0.1:8983/solr/mysite',
#     },
# }

# Suuuuper simple connections for basically just silencin haystack (Not recommended)
HAYSTACK_CONNECTIONS = {
    'default': {
        'ENGINE': 'haystack.backends.simple_backend.SimpleEngine',
    },
}
# HAYSTACK_CONNECTIONS = {
#               'default': {
#                     'ENGINE': 'haystack.backends.elasticsearch_backend.ElasticsearchSearchEngine',
#                     'URL': 'http://127.0.0.1:9200/',
#                     'INDEX_NAME': 'haystack_books',
#               },
#     }

HAYSTACK_SIGNAL_PROCESSOR = 'haystack.signals.RealtimeSignalProcessor'

REST_FRAMEWORK = {
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 10
}
REST_FRAMEWORK = {
    # Use Django's standard `django.contrib.auth` permissions,
    # or allow read-only access for unauthenticated users.
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly'
    ]
}



# ====================================================== ======================================================================================================
# ======================  ADD TO ENVIORNMENT VARIABLES  ======================
# ============================================================================================================================================================
# git+git
# https://github.com/johnfraney/wkhtmltopdf-pack.git
# pdfkit==0.6.1
# ADD TO ENVIORNMENT VARIABLES
WKHTMLTOPDF_CMD = os.environ.get('WKHTMLTOPDF_BINARY')
WKHTMLTOPDF_BINARY = os.environ.get('WKHTMLTOPDF_BINARY')
WKHTMLTOPDF_CONFIG = pdfkit.configuration(wkhtmltopdf=WKHTMLTOPDF_BINARY)

# DATABASE_ROUTERS = ('delve.routers.MyDBRouter',)


try:
    from . import local_settings as loc_Data
    DATABASES = loc_Data.DATABASES
    try:
        M2M_S3 = loc_Data.M2M_S3
    except:
        M2M_S3 = None
        print("No Local m2m bucket established")

    print("Using local vars")
        
except Exception as e:
    DEBUG = False 
    print(e)
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME' : os.environ.get('DB_NAME'),
            'USER' : os.environ.get('DB_USER'),
            'PASSWORD' : os.environ.get('DB_PASSWORD'),
            'HOST' : os.environ.get('DB_HOST'),
            'PORT' : os.environ.get('DB_PORT'),
        }
    }
    redis_host = os.environ.get('REDIS_HOST', 'localhost')
    # Channel layer definitions
    # http://channels.readthedocs.io/en/latest/topics/channel_layers.html
    CHANNEL_LAYERS = {
        'default': {
            'BACKEND': 'channels_redis.core.RedisChannelLayer',
            'CONFIG': {
                "hosts": [os.environ.get('REDIS_URL', 'redis://localhost:6379')],
            },
        },
    }
    print("Using environment variables")

# ====================================================== ======================================================================================================
# ======================  AWS S3 BUCKET  ======================
# ============================================================================================================================================================
# AWS_ACCESS_KEY_ID       =  os.environ.get('AWS_DELVE_CRM_ACCESS_KEY')
# AWS_SECRET_ACCESS_KEY   =  os.environ.get('AWS_DELVE_CRM_SECRET_ACCESS_KEY')
# AWS_STORAGE_BUCKET_NAME =  os.environ.get('AWS_S3_BUCKET')

# # django-storage documentation -> Amazon S3
# AWS_DEFAULT_ACL = None
# # media
# # static
if not DEBUG:
    # aws settings
    AWS_ACCESS_KEY_ID = os.getenv('AWS_DELVE_CRM_ACCESS_KEY')
    AWS_SECRET_ACCESS_KEY = os.getenv('AWS_DELVE_CRM_SECRET_ACCESS_KEY')
    AWS_STORAGE_BUCKET_NAME = os.getenv('AWS_S3_BUCKET')
    # AWS_DEFAULT_ACL = 'public-read'
    # AWS_S3_FILE_OVERWRITE = False
    AWS_DEFAULT_ACL = None
    AWS_S3_CUSTOM_DOMAIN = f'{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com'
    AWS_S3_OBJECT_PARAMETERS = {'CacheControl': 'max-age=86400'}
    # s3 static settings
    AWS_LOCATION = 'static'
    STATIC_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/{AWS_LOCATION}/'
    STATICFILES_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
    DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
# elif LOCAL_S3:
#     print('Found local s3 connection settings')
#     # aws settings
#     AWS_ACCESS_KEY_ID =         LOCAL_S3['AWS_DELVE_CRM_ACCESS_KEY']
#     AWS_SECRET_ACCESS_KEY =     LOCAL_S3['AWS_DELVE_CRM_SECRET_ACCESS_KEY']
#     AWS_STORAGE_BUCKET_NAME =   LOCAL_S3['AWS_S3_BUCKET']
#     # AWS_DEFAULT_ACL = 'public-read'
#     # AWS_S3_FILE_OVERWRITE = False
#     AWS_DEFAULT_ACL = None
#     AWS_S3_CUSTOM_DOMAIN = f'{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com'
#     AWS_S3_OBJECT_PARAMETERS = {'CacheControl': 'max-age=86400'}
#     # s3 static settings
#     AWS_LOCATION = 'static'
#     STATIC_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/{AWS_LOCATION}/'
#     STATICFILES_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'


LOGIN_URL = 'user_login/' 
LOGIN_REDIRECT_URL = LOGIN_URL

LOGOUT_URL = 'user_login/' 
LOGOUT_REDIRECT_URL = LOGOUT_URL


# CSRF_COOKIE_SECURE = False


# Use Twilio custom User Model
# AUTH_USER_MODEL = 'twofa.TwoFAUser'

AUTH_USER_MODEL = 'delve.Profile'


# Twilio Authy Application Key
ACCOUNT_SECURITY_API_KEY = os.environ.get('TWILIO_ACCOUNT_SECURITY_API_KEY')
TWILIO_ACCOUNT_SID = os.environ.get('TWILIO_ACCOUNT_SID')
TWILIO_AUTH_TOKEN = os.environ.get('TWILIO_AUTH_TOKEN') 
TWILIO_VERIFICATION_SID = os.environ.get('TWILIO_VERIFICATION_SID')

DATA_UPLOAD_MAX_MEMORY_SIZE = None